sapply(df_clean$detected_country, n_distinct)
sapply(unique(df_clean$detected_country), n_distinct)
table(df_clean$detected_country)
ggplot(data = world) +
geom_sf(aes(fill = table(df_clean$detected_country))) +
scale_fill_viridis_c(option = "plasma", trans = "sqrt")
length(table(df_clean$detected_country))
head(world$name)
ggplot(data = world) + geom_sf() +
xlab("Longitude") + ylab("Latitude") +
ggtitle("World map",
subtitle = paste0("(", length(unique(world$postal == table(df_clean$detected_country))), " countries)"))
world$postal == table(df_clean$detected_country)
world_modified <- world %>%
mutate(my_selection = ifelse(admin %in% unique(df_clean$detected_country),
1, NA))
dim(world_modified)
dim(world)
head(world_modified)
world = ne_countries(scale = "medium", returnclass = "sf")
class(world)
world_modified <- world %>%
mutate(my_selection = ifelse(admin %in% unique(df_clean$detected_country),
1, NA))
ggplot(data = world) + geom_sf() +
xlab("Longitude") + ylab("Latitude") +
ggtitle("World map",
subtitle = paste0("(", length(unique(world$NAME)), " countries)"))
ggplot(data = world) +
geom_sf()
ggplot(data = world) +
geom_sf() +
xlab("Longitude") + ylab("Latitude") +
ggtitle("World map", subtitle = paste0("(", length(unique(world$NAME)), " countries)"))
ggplot(data = world) +
geom_sf(aes(fill = my_selection)) +
scale_fill_viridis_c(option = "plasma", trans = "sqrt")
world = ne_countries(scale = "medium", returnclass = "sf")
class(world)
world_modified <- world %>%
mutate(my_selection = ifelse(admin %in% unique(df_clean$detected_country),
1, NA))
ggplot(data = world) + geom_sf() +
xlab("Longitude") + ylab("Latitude") +
ggtitle("World map",
subtitle = paste0("(", length(unique(world$NAME)), " countries)"))
ggplot(data = world_modified) +
geom_sf()
ggplot(data = world_modified) +
geom_sf() +
xlab("Longitude") + ylab("Latitude") +
ggtitle("World map", subtitle = paste0("(", length(unique(world$NAME)), " countries)"))
ggplot(data = world_modified) +
geom_sf(aes(fill = my_selection)) +
scale_fill_viridis_c(option = "plasma", trans = "sqrt")
length(world_modified$my_selection)
is.na(length(world_modified$my_selection))
View(world_modified)
ggplot(data = world_modified) +
geom_sf(aes(fill = pop_est)) +
scale_fill_viridis_c(option = "plasma", trans = "sqrt")
my_countries <- c("Aruba","Afghanistan", "Morocco", "Canada")
class(my_countries)
typeof(My_countries)
typeof(my_countries)
unique(df_clean$detected_country)
my_countries <- c(unique(df_clean$detected_country))
class(my_countries)
world_modified <- world %>%
mutate(my_selection = ifelse(admin %in% my_countries,
1, NA))
ggplot(data = world_modified) +
geom_sf(aes(fill=my_selection)) +
theme_bw()
world_modified$my_selection
world$admin\
world$admin
world <- ne_countries(scale = "medium", returnclass = "sf")
my_countries <- c(unique(df_clean$detected_country))
world_modified <- world %>%
mutate(my_selection = ifelse(postal %in% my_countries,
1, NA))
ggplot(data = world_modified) +
geom_sf(aes(fill=my_selection)) +
theme_bw()
world_modified$my_selection
ggplot(data = world) + geom_sf() +
xlab("Longitude") + ylab("Latitude") +
ggtitle("World map",
subtitle = paste0("(", length(unique(world$NAME)), " countries)"))
ggplot(data = world_modified) +
ggtitle("World map")
ggplot(data = world_modified) +
ggtitle("World map") +
geom_sf(aes(fill=my_selection)) +
theme_bw()
table(df_clean$detected_country)
group_by(df_clean$detected_country)
table(df_clean$detected_country)[1]
table(df_clean$detected_country)
dim(table(df_clean$detected_country))
length(df_clean$detected_country)
df = df_clean
table(df$detected_country)
table(df$detected_country)[1]
table(df$detected_country)[1][1]
table(df$detected_country)[0][1]
table(df$detected_country)[0]
as.data.frame.matrix(table(df$detected_country))
as.data.frame.matrix(table(df$detected_country))
as.data.frame(table(df$detected_country))
x = as.data.frame(table(df$detected_country))
world_modified <- world %>%
mutate(my_selection = ifelse(postal %in% x$Var1,
1, NA))
ggplot(data = world_modified) +
ggtitle("World map") +
geom_sf(aes(fill=x$Freq)) +
theme_bw()
world_modified <- world %>%
mutate(my_selection = ifelse(postal %in% c(x$Var1),
1, NA))
ggplot(data = world_modified) +
ggtitle("World map") +
geom_sf(aes(fill=x$Freq)) +
theme_bw()
world
my_countries <- c(unique(df_clean$detected_country))
world <- ne_countries(scale = "medium", returnclass = "sf")
my_countries <- c(unique(df_clean$detected_country))
x = as.data.frame(table(df$detected_country))
x$Var1
x[-1]
x
x[-1,]
x = x[-1,]
world_modified <- world %>%
mutate(my_selection = ifelse(postal %in% c(x$Var1),
1, NA))
ggplot(data = world_modified) +
ggtitle("World map") +
geom_sf(aes(fill=x$Freq)) +
theme_bw()
x = c(x[-1,])
world_modified <- world %>%
mutate(my_selection = ifelse(postal %in% c(x$Var1),
1, NA))
ggplot(data = world_modified) +
ggtitle("World map") +
geom_sf(aes(fill=x$Freq)) +
theme_bw()
world <- ne_countries(scale = "medium", returnclass = "sf")
x = as.data.frame(table(df$detected_country))
x = c(x[-1,])
my_countries = c(x$Var1)
world_modified <- world %>%
mutate(my_selection = ifelse(postal %in% my_countries,
1, NA))
length(world_modified$my_selection)
length(x$Freq)
world <- ne_countries(scale = "medium", returnclass = "sf")
my_countries <- c(unique(df_clean$detected_country))
world_modified <- world %>%
mutate(my_selection = ifelse(postal %in% my_countries,
1, NA))
ggplot(data = world_modified) +
ggtitle("World map") +
geom_sf(aes(fill=my_selection)) +
theme_bw()
length(world_modified$my_selection)
world <- ne_countries(scale = "medium", returnclass = "sf")
x = as.data.frame(table(df$detected_country))
source("C:/Users/Acer/OneDrive - Newcastle University/Newcastle/CSC8631 - EDA & Data Managament/Project_mooc/src/eda.R")
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
world <- ne_countries(scale = "medium", returnclass = "sf")
my_countries <- c(unique(df_clean$detected_country))
world_modified <- world %>%
mutate(my_selection = ifelse(postal %in% my_countries,
1, NA))
length(world_modified$my_selection)
my_countries = c(x)
x = as.data.frame(table(df$detected_country))
df = df_clean
x = as.data.frame(table(df$detected_country))
x = c(x[-1,])
my_countries = c(x)
world_modified <- world %>%
mutate(my_selection = ifelse(postal %in% my_countries,
1, NA))
head(world_modified)
world <-map_data("world")
world <-map_data("world")
n_map <- left_join(x, world_map, by = "post")
class(x)
x = as.data.frame(table(df$detected_country))
world <-map_data("world")
n_map <- left_join(x, world_map, by = "post")
n_map <- left_join(x, world, by = "post")
n_map <- left_join(world, x, by = "post")
world
world <- ne_countries(scale = "medium", returnclass = "sf")
n_map <- left_join(world, x, by = "post")
n_map <- left_join(world, x, by = "postal")
world$postal
n_map <- left_join(world, x$Var1, by = "postal")
world <- ne_countries(scale = "medium", returnclass = "sf")
my_countries <- c(unique(df_clean$detected_country))
world_modified <- world %>%
mutate(my_selection = ifelse(postal %in% my_countries,
1, NA))
ggplot(data = world_modified) +
ggtitle("World map") +
geom_sf(aes(fill=my_selection)) +
theme_bw()
view_download = ggplot(data = video_stats, aes(y = north_america_views_percentage, x = step_position)) +
geom_point(aes(colour = factor(total_downloads), size = 2))
view_download
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = normalizePath('..'))
library(ProjectTemplate)
load.project()
# Run data analysis script
source("src/eda.R")
country_plot
country_plot
enrol_age
ggplot(data = df_clean, aes(x = factor(age_range),
y = prop.table(stat(count)),
fill = factor(gender),
label = scales::percent(prop.table(stat(count))))) +
geom_bar(position = "dodge") +
geom_text(stat = 'count',
position = position_dodge(.9),
vjust = -0.5,
size = 3) +
scale_y_continuous(labels = scales::percent) +
labs(x = 'Age Range', y = 'Percentage', fill = 'gender')
ggplot(data = df_clean, aes(x = factor(age_range),
y = prop.table(stat(count)),
fill = factor(gender),
label = scales::percent(prop.table(stat(count))))) +
geom_bar(position = "dodge") +
geom_text(stat = 'count',
position = position_dodge(.9),
vjust = -0.5,
size = 3) +
scale_y_continuous(labels = scales::percent) +
labs(x = 'Age Range', y = 'Percentage', fill = 'gender')
ggplot(df_clean, aes(x = employment_status, fill = gender)) +
geom_bar()
# From question dataset
ques_resp = cyber.security.1_question.response
head(ques_resp)
View(cyber.security.7_question.response)
View(cyber.security.7_leaving.survey.responses)
summary(ques_resp)
correct_plot = ggplot(question_response, aes(x = factor(correct))) +
geom_bar(stat = "count", width = 0.7, fill = "steelblue") + theme_minimal()
correct_plot
correct_plot = ggplot(ques_resp, aes(x = factor(correct))) +
geom_bar(stat = "count", width = 0.7, fill = "steelblue") + theme_minimal()
correct_plot
correct_plot = ggplot(ques_resp, aes(x = factor(correct))) +
geom_bar(stat = "count", width = 0.7, fill = "steelblue") + theme_minimal()
correct_plot
table(ques_resp$correct)
count_true = length(which(ques_resp$correct == "true"))
count_true
count_false = length(which(ques_resp$correct == "false"))
count_false
total_response = length(ques_resp$correct)
count_true = table(ques_resp$correct)[1]
count_true
count_true = table(ques_resp$correct)[1][1]
count_true
total_response = length(ques_resp$correct)
total_response
true_percent = (count_true / total_response) * 100
true_percent
round(true_percent)
false_percent = (count_false / total_response) * 100
false_percent
round(false_percent)
total_resp = length(ques_resp$correct)
total_resp
country_map = ggplot(data = world_modified) +
ggtitle("World map") +
geom_sf(aes(fill=Freq)) +
theme_bw()
country_map
world <- ne_countries(scale = "medium", returnclass = "sf")
#my_countries <- c(unique(df_clean$detected_country))
x = as.data.frame(table(df$detected_country))
x = c(x[-1,])
my_countries = c(x)
world_modified <- world %>%
mutate(my_selection = ifelse(postal %in% my_countries,
1, NA))
world <-map_data("world")
n_map <- left_join(world, x, by = "postal")
country_map = ggplot(data = world_modified) +
ggtitle("World map") +
geom_sf(aes(fill=Freq)) +
theme_bw()
country_map
world <- ne_countries(scale = "medium", returnclass = "sf")
my_countries <- c(unique(df_clean$detected_country))
world_modified <- world %>%
mutate(my_selection = ifelse(postal %in% my_countries,
1, NA))
ggplot(data = world_modified) +
ggtitle("World map") +
geom_sf(aes(fill=my_selection)) +
theme_bw()
country_plot = ggplot(df_clean, aes(x = factor(country))) +
geom_bar(stat = "count", width = 0.7, fill = "steelblue") + theme_minimal() +
scale_x_discrete(guide = guide_axis(n.dodge = 10))
country_plot
world <- ne_countries(scale = "medium", returnclass = "sf")
my_countries <- c(unique(df_clean$detected_country))
world_modified <- world %>%
mutate(my_selection = ifelse(postal %in% my_countries,
1, NA))
country_map = ggplot(data = world_modified) +
ggtitle("World map") +
geom_sf(aes(fill=my_selection)) +
theme_bw()
country_map
country_map
library(ProjectTemplate)
load.project()
# Run data analysis script
source("src/eda.R")
view_download
asia_transcript
# Visualizing total downloads with x-axis = total transcript views & y-axis = asia view %
asia_transcript = ggplot(data = video_stats, aes(x = total_transcript_views, y = asia_views_percentage)) +
geom_point(aes(colour = factor(step_position), size = 2)) # scatter plot to visualize total downloads
asia_transcript
asia_hd
view_download
asia_transcript
asia_hd
asia_hd
correct_plot = ggplot(ques_resp, aes(x = factor(correct))) +
geom_bar(stat = "count", width = 0.7, fill = "steelblue") + theme_minimal()
correct_plot
View(cyber.security.1_question.response)
table(ques_resp$correct)
total_resp
true_percent
round(true_percent)
false_percent = (count_false / total_resp) * 100
false_percent
country_plot
country_map
gender_plot
country_plot
world <- ne_countries(scale = "medium", returnclass = "sf")
my_countries <- c(unique(df_clean$country))
world_modified <- world %>%
mutate(my_selection = ifelse(postal %in% my_countries,
1, NA))
country_map = ggplot(data = world_modified) +
ggtitle("World map") +
geom_sf(aes(fill=my_selection)) +
theme_bw()
country_map
table(df_clean$country)
country_plot
country_map
country_plot
country_map
enrol_age
employment_plot
enrol_age
enrol_age
15.708/10.109
9.876/7.387
9.953/7.854
employment_plot
View(cyber.security.1_enrolments)
employment_plot = ggplot(df_clean, aes(x = factor(employment_status))) +
geom_bar(stat = "count", width = 0.7, fill = "steelblue") + theme_minimal() +
scale_x_discrete(guide = guide_axis(n.dodge = 2))
employment_plot
employment_plot
employment_plot
lapply(video_stats, summary)
sapply(video_stats, summary)
head(df_clean)
lapply(video_stats, summary)
view_download
box_plot
box_plot
summary(video_stats$north_america_views_percentage)
summary(video_stats$north_america_views_percentage)
summary(video_stats$asia_views_percentage)
summary(video_stats$north_america_views_percentage)
summary(video_stats$asia_views_percentage)
summary(video_stats$europe_views_percentage)
summary(video_stats$oceania_views_percentage)
View(video_stats)
summary(video_stats$north_america_views_percentage)
summary(video_stats$asia_views_percentage)
summary(video_stats$europe_views_percentage)
summary(video_stats$oceania_views_percentage)
colnames(video_stats)
asia_transcript
View(video_stats)
asia_hd
high_views = max(video_stats$total_views) # calculating the highest views seen
high_views
low_views = min(video_stats$total_views) # calculating lowest viewership
low_views
view_download
View(video_stats)
View(video_stats)
# Visualizing on x-axis = total transcript views & y-axis = asia view % filled in by step position
decline_view = ggplot(data = video_stats, aes(x = step_position, y = total_views) # scatter plot to visualize total downloads
# Visualizing on x-axis = total transcript views & y-axis = asia view % filled in by step position
decline_view = ggplot(data = video_stats, aes(x = step_position, y = total_views)) # scatter plot to visualize total downloads
decline_view
# Visualizing on x-axis = total transcript views & y-axis = asia view % filled in by step position
decline_view = ggplot(data = video_stats, aes(x = step_position, y = total_views)) +
geom_point(aes(colour = factor(video_duration), size = 2)) # scatter plot to visualize total downloads
decline_view
decline_view
decline_view
library('ProjectTemplate')
load.project()
# Calculating enrollments based on gender
# plot(as.factor(df_clean$gender))
gender_plot = ggplot(df_clean, aes(x = factor(gender))) +
geom_bar(stat = "count", width = 0.7, fill = "steelblue") + theme_minimal()
gender_plot
# Plotting enrollments based on country
# plot dependent of country
country_plot = ggplot(df_clean, aes(x = factor(country))) +
geom_bar(stat = "count", width = 0.7, fill = "steelblue") + theme_minimal() +
scale_x_discrete(guide = guide_axis(n.dodge = 10))
country_plot
world <- ne_countries(scale = "medium", returnclass = "sf")
my_countries <- c(unique(df_clean$country))
world_modified <- world %>%
mutate(my_selection = ifelse(postal %in% my_countries,
1, NA))
country_map = ggplot(data = world_modified) +
ggtitle("World map") +
geom_sf(aes(fill=my_selection)) +
theme_bw()
country_map
# Identifying most number of enrollments based on age groups
# plot(as.factor(df_clean$age_range))
enrol_age = ggplot(data = df_clean, aes(x = factor(age_range),
y = prop.table(stat(count)),
fill = factor(gender),
label = scales::percent(prop.table(stat(count))))) +
geom_bar(position = "dodge") +
geom_text(stat = 'count',
position = position_dodge(.9),
vjust = -0.5,
size = 2.5) +
scale_y_continuous(labels = scales::percent) +
labs(x = 'Age Range', y = 'Percentage', fill = 'gear')
enrol_age
# Identifying no. of enrollments based on employment status of students
# plot(as.factor(df_clean$employment_status))
employment_plot = ggplot(df_clean, aes(x = factor(employment_status))) +
geom_bar(stat = "count", width = 0.7, fill = "steelblue") + theme_minimal() +
scale_x_discrete(guide = guide_axis(n.dodge = 2))
employment_plot
# Factoring based on employment status types then summarizing the data
emp_stat = as.factor(df_clean$employment_status)
summary(emp_stat)
# Factoring based on highest education level types then summarizing the data
edu_level = as.factor(df_clean$highest_education_level)
summary(edu_level)
# plot(as.factor(df_clean$highest_education_level))
employment_plot = ggplot(df_clean, aes(x = factor(highest_education_level))) +
geom_bar(stat = "count", width = 0.7, fill = "steelblue") + theme_minimal() +
scale_x_discrete(guide = guide_axis(n.dodge = 2))
employment_plot
# Plotting box plot
# boxplot(video_stats$north_america_views_percentage)
box_plot = ggplot(video_stats, aes(y = north_america_views_percentage)) +
geom_boxplot(fill = "steelblue")
#geom_point(aes(x = north_america_views_percentage))
box_plot
# Visualizing total downloads with x-axis = step position & y-axis = North america view %
view_download = ggplot(data = video_stats, aes(y = north_america_views_percentage, x = step_position)) +
geom_point(aes(colour = factor(total_downloads), size = 2))
view_download
# Visualizing on x-axis = total transcript views & y-axis = asia view % filled in by step position
asia_transcript = ggplot(data = video_stats, aes(x = total_transcript_views, y = asia_views_percentage)) +
geom_point(aes(colour = factor(step_position), size = 2)) # scatter plot to visualize total downloads
asia_transcript
# Visualizing step position with x-axis = hd views & y-axis = asia view %
asia_hd = ggplot(data = video_stats, aes(x = asia_views_percentage, y = viewed_hd)) +
geom_point(aes(colour = factor(step_position), size = 2)) # scatter plot to visualize views in HD with respect to asia
asia_hd
# Visualizing on x-axis = total transcript views & y-axis = asia view % filled in by step position
decline_view = ggplot(data = video_stats, aes(x = step_position, y = total_views)) +
geom_point(aes(colour = factor(video_duration), size = 2)) # scatter plot to visualize total downloads
decline_view
# Plot the count for correct and incorrect response
correct_plot = ggplot(ques_resp, aes(x = factor(correct))) +
geom_bar(stat = "count", width = 0.7, fill = "steelblue") + theme_minimal()
correct_plot
table(df_clean$country)
